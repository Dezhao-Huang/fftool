#!/usr/bin/env python

import sys
import argparse
import math

def readuff(file):
    uff = []
    with open(file, 'r') as f:
        for line in f:
            if line.startswith('param'):
                tok = line.split()
                atom = {}
                atom['type'] = tok[1]
                atom['r1'] = float(tok[2])
                atom['theta0'] = float(tok[3])
                atom['x1'] = float(tok[4])
                atom['D1'] = float(tok[5])
                atom['zeta'] = float(tok[6])
                atom['Z1'] = float(tok[7])
                atom['Vi'] = float(tok[8])
                atom['Uj'] = float(tok[9])
                atom['Xi'] = float(tok[10])
                uff.append(atom)
    return uff


def nonbonded(atom, kcal = False):
    sig = atom['x1'] / 2.0**(1.0/6.0)
    eps = atom['D1']
    if not kcal:
        eps *= 4.184
    return sig, eps


def bond(atomi, atomj, bo = 1.0, kcal = False):
    ri = atomi['r1']
    rj = atomj['r1']
    rbo = -0.1332 * (ri + rj) * math.log(bo)
    Xi = atomi['Xi']
    Xj = atomj['Xi']
    ren = ri * rj * (Xi**0.5 - Xj**0.5)**2 / (Xi * ri + Xj * rj)
    rij = ri + rj + rbo + ren    
    Zi = atomi['Z1']
    Zj = atomj['Z1']
    kij = 664.12 * Zi * Zj / rij
    if not kcal:
        kij *= 4.184
    return rij, kij


def angle(atomi, atomj, atomk, boij, bojk, kcal = False):
    rij, dum = bond(atomi, atomj, boij)
    rjk, dum = bond(atomj, atomk, bojk)
    theta0 = atomj['theta0'] * math.pi / 180.0
    sth0 = math.sin(theta0)
    cth0 = math.cos(theta0)
    rik = (rij*rij + rjk*rjk - 2*rij*rjk*cth0)**0.5
    Zi = atomi['Z1']
    Zk = atomk['Z1']
    kijk = 664.12 * Zi * Zk / (rik**5) * (rij * rjk * (1.0 - cth0 * cth0) -
                                          rik * rik * cth0)
    if atomj['theta0'] == 180.0:
        c0 = 1.0
        c1 = -1.0
        c2 = 0.0
        m = 1
    elif atomj['theta0'] == 120.0:
        c0 = 1.0
        c1 = -1.0
        c2 = 0.0
        m = 3
    elif atomj['theta0'] == 90.0:
        c0 = 1.0
        c1 = -1.0
        c2 = 0.0
        m = 4
    else:
        c2 = 1.0 / (4.0 * sth0 * sth0)
        c1 = -4.0 * c2 * cth0
        c0 = c2 * (2.0 * cth0 * cth0 + 1.0)
        m = 1
    if not kcal:
        kijk *= 4.184
    return kijk, c0, c1, c2, m

def torsion(atomi, atomj, atomk, atoml, bojk, kcal = False):
    j = k = 0
    if atomj['type'][2] == '3':
        j = 3
    elif atomj['type'][2] == '2':
        j = 2
    if atomk['type'][2] == '3':
        k = 3
    elif atomk['type'][2] == '2':
        k = 2
    
    v1 = v2 = v3 = v4 = 0.0
    if j == 3 and k == 3:
        Vj = atomj['Vi']
        Vk = atomk['Vi']
        v3 = (Vj * Vk)**0.5 / 9.0
    elif j == 2 and k == 2:
        Uj = atomj['Uj']
        Uk = atomk['Uj']
        v2 = 5.0 * (Uj * Uk)**0.5 * (1.0 + 4.18 * math.log(bojk)) / 4.0
    elif atomi['type'][2] == '2'and j == 2 and k == 3 and bojk == 1.0:
        v3 = 2.0
    elif j == 3 and k == 2 and atoml['type'][2] == '2'and bojk == 1.0:
        v3 = 2.0
        
    if not kcal:
        v1 *= 4.184
        v2 *= 4.184
        v3 *= 4.184
        v4 *= 4.184
    return v1, v2, v3, v4


def main():
    parser = argparse.ArgumentParser(description = 'Extract OPLS-like '
                                     'parameters from UFF')
    parser.add_argument('--uff', default = 'UFF.prm',
                        help = 'file with UFF parameters (default UFF.prm)')
    parser.add_argument('--bo', default = '1,1',
                        help = 'bond order for one or two bonds bo_ij,bo_jk '
                        'the first is used for bonds, both for angles, '
                        'the second for torsions (default 1,1)')
    parser.add_argument('--kcal', action = 'store_true',
                        help = 'output in kcal/mol,A (default kJ/mol,A)')
    parser.add_argument('atoms', nargs = '+',
                        help = 'one to four UFF atom types')
    args = parser.parse_args()
        
    uff = readuff(args.uff)

    tok = args.bo.split(',')
    boij = float(tok[0])
    if len(tok) > 1:
        bojk = float(tok[1])
    else:
        bojk = 1.0
        
    n = len(args.atoms)
    if n == 1:
        for atom in uff:
            if atom['type'] == args.atoms[0]:
                break
        sig, eps = nonbonded(atom, args.kcal)
        print('# i    pot   sig     eps')
        print('{0:5s}  lj  {1:7.3f} {2:9.5f}'.format(atom['type'], sig, eps))

    elif n == 2:
        for atomi in uff:
            if atomi['type'] == args.atoms[0]:
                break
        for atomj in uff:
            if atomj['type'] == args.atoms[1]:
                break
        rij, kij = bond(atomi, atomj, boij, args.kcal)
        print('# i   j     pot    r0        kr')
        print('{0:5s} {1:5s} harm  {2:6.3f}  {3:7.1f}'.format(
            atomi['type'], atomj['type'], rij, kij))

    elif n == 3:
        for atomi in uff:
            if atomi['type'] == args.atoms[0]:
                break
        for atomj in uff:
            if atomj['type'] == args.atoms[1]:
                break
        for atomk in uff:
            if atomk['type'] == args.atoms[2]:
                break
        kijk, c0, c1, c2, m = angle(atomi, atomj, atomk, boij, bojk, args.kcal)
        print('# i   j     k     pot   th0     kth'
              '      c0      c1      c2     m')
        print('{0:5s} {1:5s} {2:5s} cos  {3:7.2f} {4:7.2f} '
              '{5:7.3f} {6:7.3f} {7:7.3f} {8:2d}'.format(
                atomi['type'], atomj['type'], atomk['type'], atomj['theta0'],
                kijk, c0, c1, c2, m))
    elif n == 4:
        for atomi in uff:
            if atomi['type'] == args.atoms[0]:
                break
        for atomj in uff:
            if atomj['type'] == args.atoms[1]:
                break
        for atomk in uff:
            if atomk['type'] == args.atoms[2]:
                break
        for atoml in uff:
            if atoml['type'] == args.atoms[3]:
                break
        v1, v2, v3, v4 = torsion(atomi, atomj, atomk, atoml, bojk, args.kcal)
        print('# i   j     k     l     pot    v1       v2       v3       v4')
        print('{0:5s} {1:5s} {2:5s} {3:5s} cos  {4:8.4f} {5:8.4f} '
              '{6:8.4f} {7:8.4f}'.format(
                atomi['type'], atomj['type'], atomk['type'], atoml['type'],
                v1, v2, v3, v4))
    
        
if __name__ == "__main__":
    main()

